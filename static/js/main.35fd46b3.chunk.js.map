{"version":3,"sources":["getWeb3.js","components/AddVoter.js","components/AddProposal.js","components/VotingSession.js","components/TallyVotingSession.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","on","location","reload","provider","providers","WebsocketProvider","AddVoter","props","addVoter","e","preventDefault","state","accounts","contract","owner","listAddress","newAddress","address","value","methods","send","from","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","this","map","addresse","Form","Group","controlId","Label","Control","type","id","placeholder","ref","input","Button","onClick","React","Component","AddProposal","addProposal","newProposalDesc","proposal","listProposal","description","VotingSession","setVote","proposalId","setVoteButton","index","Number","voteCount","TallyVotingSession","tallyVotes","workflowStatus","voter","winningProposalID","App","Proposal","steps","title","buttonLabel","goToNextStep","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","useState","setState","useRef","setEventValue","useEffect","eth","getAccounts","s","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","call","getVoter","then","data","options","fromBlock","toBlock","getPastEvents","voterEvent","returnValues","voterAddress","listProposalEvents","forEach","indexProps","getOneProposal","push","events","VoterRegistered","event","ProposalRegistered","changed","str","alert","error","methodToCall","className","activeStep","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35fd46b3.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          console.log('window ethereum')\n          window.ethereum.on('accountsChanged', function() {\n            window.location.reload();\n          });\n          window.ethereum.on('chainChanged', function() {\n            window.location.reload();\n          })\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.WebsocketProvider(\n          \"ws://127.0.0.1:8545\"\n        );\n        console.log('localhost')\n        /*const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );*/\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\n\nexport default class AddVoter extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    addVoter = async (e) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = this.props.state;\n      let newAddress = this.props.state.address.value;\n      await contract.methods.addVoter(newAddress).send({ from: accounts[0] });\n      //listAddress.push(newAddress);\n      //setState(s => ({...s, listAddress: listAddress}))\n    }\n\n\n    render(){\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Add Voter Account</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>@</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.props.state.listAddress !== null &&\n                          this.props.state.listAddress.map((addresse) => (\n                            <tr><td>{addresse}</td></tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div><br></br><div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Add a new Voter</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formAddress\">\n                    <Form.Label>Voter address</Form.Label>\n                    <Form.Control type=\"text\" id=\"address\" placeholder=\"Enter address\" \n                      ref={(input) => { this.props.state.address = input; } } />\n                  </Form.Group>\n                  <Button onClick={this.addVoter} variant=\"dark\"> Autoriser </Button>\n                </Card.Body>\n              </Card>\n            </div></>\n        )\n    }\n\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\n\nexport default class AddProposal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n\n\n    }\n\n\n    addProposal = async (e) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = this.props.state;\n      let newProposalDesc = this.props.state.proposal.value;\n      await contract.methods.addProposal(newProposalDesc).send({ from: accounts[0] });\n\n\n\n\n    }\n\n    render(){\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>List of Proposals</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>Id</th>\n                          <th>Description</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.props.state.listProposal !== null &&\n                          this.props.state.listProposal.map((proposal) => (\n                            <tr><td>{proposal.id}</td><td>{proposal.description}</td></tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div><br></br><div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Add a proposal</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formProposal\">\n                    <Form.Label>Proposal Description</Form.Label>\n                    <Form.Control type=\"text\" id=\"proposal\" placeholder=\"Enter proposal description\" \n                      ref={(input) => { this.props.state.proposal = input; } } />\n                  </Form.Group>\n                  <Button onClick={this.addProposal} variant=\"dark\"> Add </Button>\n                </Card.Body>\n              </Card>\n            </div></>\n        )\n    }\n\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\n\nexport default class VotingSession extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n\n\n    }\n\n    setVote = async (e) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = this.props.state;\n      let newProposalDesc = this.props.state.proposalId.value;\n      await contract.methods.setVote(newProposalDesc).send({ from: accounts[0] });\n\n\n    }\n\n    setVoteButton = async (e, index) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = this.props.state;\n      //let newProposalDesc = this.props.state.proposalId.value;\n      await contract.methods.setVote(Number(index)).send({ from: accounts[0] });\n\n\n    }\n\n    render(){\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Vote for a proposal</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>Id</th>\n                          <th>Description</th>\n                          <th>Vote Count</th>\n                          <th>Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.props.state.listProposal !== null &&\n                          this.props.state.listProposal.map((proposal) => (\n                            <tr><td>{proposal.id}</td><td>{proposal.description}</td><td>{proposal.voteCount}</td><td><Button onClick={(e) => this.setVoteButton(e, proposal.id)} variant=\"dark\"> Voter </Button></td></tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div></>\n        )\n    }\n\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\n\nexport default class TallyVotingSession extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n\n\n    }\n\n    setVote = async (e) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = this.props.state;\n      let newProposalDesc = this.props.state.proposalId.value;\n      await contract.methods.setVote(newProposalDesc).send({ from: accounts[0] });\n\n\n    }\n\n    tallyVotes = async (e) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = this.props.state;\n      //let newProposalDesc = this.props.state.proposalId.value;\n      await contract.methods.tallyVotes().send({ from: accounts[0] });\n    }\n\n    render(){\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n\n            <Card style={{ width: '50rem' }}>\n              <Card.Header>\n              { this.props.state.workflowStatus === 4 &&\n                <strong> Vote Not Tallied\n                </strong>\n              }\n              { this.props.state.workflowStatus === 5 &&\n                <strong> The winner is \n                </strong>\n              }\n              </Card.Header>\n              <Card.Body>\n              { this.props.state.workflowStatus === 5 && this.props.state.voter &&\n                <strong>\n                  id: {this.props.state.listProposal[this.props.state.winningProposalID]?.id}\n                  <br/>\n                  description: {this.props.state.listProposal[this.props.state.winningProposalID]?.description}\n                  <br/>\n                  voteCount: {this.props.state.listProposal[this.props.state.winningProposalID]?.voteCount}\n                </strong>\n              }\n              { this.props.state.workflowStatus === 5 && this.props.state.accounts && this.props.state.accounts[0] && this.props.state.accounts[0] == this.props.state.owner &&\n                <strong>\n                  {this.props.state.winningProposalID}\n                </strong>\n              }\n              </Card.Body>\n            </Card>\n          </div><br></br>\n          { this.props.state.workflowStatus === 4 && \n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Tally Vote</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formProposal\">\n                    <Form.Control type=\"text\" id=\"proposal\"\n                      ref={(input) => { this.props.state.proposalId = input; } } />\n                  </Form.Group>\n                  <Button onClick={this.tallyVotes} variant=\"dark\"> Tally Vote </Button>\n                </Card.Body>\n              </Card>\n            </div>\n          }</>\n        )\n    }\n\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Stepper from 'react-stepper-horizontal';\nimport \"./App.css\";\nimport AddVoter from \"./components/AddVoter\";\nimport AddProposal from \"./components/AddProposal\";\nimport VotingSession from \"./components/VotingSession\";\nimport TallyVotingSession from \"./components/TallyVotingSession\";\n\nfunction App() {\n\n  var Proposal = function (id, description, voteCount) {\n    this.id = id;\n    this.description = description;\n    this.voteCount = voteCount;\n  };\n\n  const steps= [{\n    title: 'Add Voter',\n    buttonLabel: 'startProposalsRegistering',\n    onClick: async(e) => {\n      e.preventDefault()\n      console.log('onClick', 1)\n      goToNextStep(state.contract.methods.startProposalsRegistering());\n    }\n  }, {\n    title: 'Proposals Registering',\n    buttonLabel: 'endProposalsRegistering',\n    onClick: (e) => {\n      e.preventDefault()\n      console.log('onClick', 2)\n      goToNextStep(state.contract.methods.endProposalsRegistering());\n    }\n  }, {\n    title: 'Proposal is ended',\n    buttonLabel: 'startVotingSession',\n    onClick: (e) => {\n      e.preventDefault()\n      console.log('onClick', 3)\n      goToNextStep(state.contract.methods.startVotingSession());\n    }\n  }, {\n    title: 'Voting Session',\n    buttonLabel: 'endVotingSession',\n    onClick: (e) => {\n      e.preventDefault()\n      console.log('onClick', 4)\n      goToNextStep(state.contract.methods.endVotingSession());\n    }\n    }, {\n      title: 'Voting Session Ended',\n  }];\n\n\n\n  const [state, setState] = useState({ steps: steps, owner: null, workflowStatus: 0, listAddress: [], web3: null, accounts: null, contract: null });\n  const inputRef = useRef();\n  const [setEventValue, setSetEventValue] = useState (0)\n  \n  useEffect(() => {\n    (async function () {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n        setState(s => ({...s, accounts: accounts}))\n        console.log(accounts);\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        const instance = new web3.eth.Contract(\n          Voting.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n\n        let owner = await instance.methods.owner().call();\n        \n        let voter;\n        instance.methods.getVoter(accounts[0]).call({ from: accounts[0]}).then((data) =>\n          voter = data);\n\n        const workflowStatus = Number(await instance.methods.workflowStatus().call());\n        const winningProposalID = Number(await instance.methods.winningProposalID().call());\n        \n        let options = {\n          fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n          toBlock: 'latest'\n        };\n        const listAddress = (await instance.getPastEvents('VoterRegistered', options)).map(voterEvent => voterEvent.returnValues.voterAddress);\n        \n\n        const listProposalEvents = (await instance.getPastEvents('ProposalRegistered', options));\n        const listProposal = [];\n    \n    \n        listProposalEvents.forEach(async(indexProps) => \n          { \n            console.log(indexProps.returnValues.proposalId)\n            const proposal =  await instance.methods.getOneProposal(Number(indexProps.returnValues.proposalId)).call({ from: accounts[0]});\n            listProposal.push(new Proposal(Number(indexProps.returnValues.proposalId), proposal.description, proposal.voteCount ));\n            setState(s => ({...s, listProposal: listProposal}))\n            console.log(listProposal);\n          });\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        setState({ steps: steps, owner: owner, voter: voter, workflowStatus: workflowStatus, listAddress: listAddress, listProposal: [], web3: web3, accounts: accounts, contract: instance, winningProposalID: winningProposalID });\n\n        instance.events.VoterRegistered()\n          .on('data', event => {\n            let value = event.returnValues.voterAddress;\n            console.log(value);\n            //updateVoter(value);\n            //setSetEventValue(value);\n          })\n\n          instance.events.ProposalRegistered()\n          .on('data', event => {\n            let value = event.returnValues;\n            console.log(value);\n            //updateProposals(instance, value);\n          })\n\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => {console.log('connected');\n          console.log(str)})\n          console.log(state);\n         \n\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, [])\n\n  useEffect(()=> {\n    console.log(state);\n    const { listAddress } = state;\n    listAddress.push(setEventValue);\n    setState(s => ({...s, listAddress: listAddress}))\n  }, [setEventValue])\n\n\n  const updateVoter = (voter) => {\n\n    const { accounts, contract, owner } = state;\n    console.log(state);\n    //listAddress.push(voter);\n    //console.log(listAddress);\n    //setState(s => ({...s, listAddress: listAddress}))\n\n  } \n\n  const goToNextStep = (methodToCall) => {\n    methodToCall.send({ from: state.accounts[0] }).then( () => {\n    const { accounts, contract, owner, listAddress } = state;\n    \n    setState(s => ({...s, workflowStatus: state.workflowStatus + 1}));\n    });\n  }\n  \n  const buttonStyle = { background: '#E0E0E0', width: 200, padding: 16, textAlign: 'center', margin: '0 auto', marginTop: 32 };\n\n\n  return (\n    <div className=\"App\">\n    <div>\n        <h2 className=\"text-center\">Système de Voting</h2>\n        <hr></hr>\n        Account user : {state.accounts && state.accounts[0]}\n        { state.accounts && state.accounts[0] && state.accounts[0] == state.owner &&\n          <h2>You are the contrat owner</h2>\n        }\n        { state.voter &&\n        <h2>You are the voter</h2>\n        }\n        <br></br>\n    </div>\n\n    <div>\n        <Stepper steps={ steps } activeStep={ state.workflowStatus }  />\n        <br/>\n        {state.workflowStatus  === 0 && (\n          <>\n            <AddVoter state={state} />\n          </>\n        )}\n        {state.workflowStatus  === 1 && (\n          <>\n            <AddProposal state={state} />\n          </>\n        )}\n        {state.workflowStatus  === 3 && (\n          <>\n            <VotingSession state={state} />\n          </>\n        )}\n\n        {state.workflowStatus >= 4 && (\n          <>\n            <TallyVotingSession state={state} />\n          </>\n        )}\n        { state.accounts && state.accounts[0] && state.accounts[0] == state.owner && steps[state.workflowStatus]?.onClick && \n        <button type=\"button\" onClick={ steps[state.workflowStatus ].onClick }>{ steps[state.workflowStatus ].buttonLabel}</button>\n        }\n        </div>\n    <br></br>\n  </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}